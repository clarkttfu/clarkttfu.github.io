{"pageProps":{"note":{"id":"vXh-HmSTsmgGA9j9IzcZ3","title":"理解 OAuth2","desc":"","updated":1641290510187,"created":1641209171824,"tags":"oauth2","custom":{},"fname":"cn.oauth2","type":"note","vault":{"fsPath":"vault"},"contentHash":"73c8b444de85cee13ad80dac2db25ef2","links":[{"type":"frontmatterTag","from":{"fname":"cn.oauth2","id":"vXh-HmSTsmgGA9j9IzcZ3","vaultName":"vault"},"value":"tags.oauth2","alias":"oauth2","xvault":false,"to":{"fname":"tags.oauth2"}},{"type":"wiki","from":{"fname":"cn.oauth2","id":"vXh-HmSTsmgGA9j9IzcZ3","vaultName":"vault"},"value":"tags.Authorization","alias":"#Authorization","position":{"start":{"line":48,"column":38,"offset":1464},"end":{"line":48,"column":52,"offset":1478},"indent":[]},"xvault":false,"to":{"fname":"tags.Authorization"}},{"type":"wiki","from":{"fname":"cn.oauth2","id":"vXh-HmSTsmgGA9j9IzcZ3","vaultName":"vault"},"value":"tags.哈希部分），并存留于User","alias":"#哈希部分），并存留于User","position":{"start":{"line":131,"column":98,"offset":3766},"end":{"line":131,"column":113,"offset":3781},"indent":[]},"xvault":false,"to":{"fname":"tags.哈希部分），并存留于User"}}],"anchors":{"基本概念":{"type":"header","text":"基本概念","value":"基本概念","line":9,"column":0,"depth":2},"角色roles":{"type":"header","text":"角色(Roles)","value":"角色roles","line":13,"column":0,"depth":3},"user-agent":{"type":"header","text":"User Agent","value":"user-agent","line":21,"column":0,"depth":3},"token":{"type":"header","text":"Token","value":"token","line":25,"column":0,"depth":3},"acess-token":{"type":"header","text":"Acess Token","value":"acess-token","line":27,"column":0,"depth":4},"refresh-token":{"type":"header","text":"Refresh Token","value":"refresh-token","line":41,"column":0,"depth":4},"access-token-scope":{"type":"header","text":"(Access Token) Scope","value":"access-token-scope","line":45,"column":0,"depth":4},"https":{"type":"header","text":"HTTPS","value":"https","line":49,"column":0,"depth":3},"client注册":{"type":"header","text":"Client注册","value":"client注册","line":53,"column":0,"depth":3},"授权类型":{"type":"header","text":"授权类型","value":"授权类型","line":73,"column":0,"depth":2},"授权码授权-authorization-code-grant":{"type":"header","text":"授权码授权 (Authorization Code Grant)","value":"授权码授权-authorization-code-grant","line":75,"column":0,"depth":3},"流程":{"type":"header","text":"流程","value":"流程","line":84,"column":0,"depth":4},"http请求示例":{"type":"header","text":"HTTP请求示例","value":"http请求示例","line":113,"column":0,"depth":4},"隐式授权-implicit-grant":{"type":"header","text":"隐式授权 (Implicit Grant)","value":"隐式授权-implicit-grant","line":133,"column":0,"depth":3},"http请求示例-1":{"type":"header","text":"HTTP请求示例","value":"http请求示例-1","line":142,"column":0,"depth":4},"客户程序凭证授权client-credentials-grant":{"type":"header","text":"客户程序凭证授权(Client Credentials Grant)","value":"客户程序凭证授权client-credentials-grant","line":159,"column":0,"depth":3},"资源所有者密码授权resource-owner-password-credentials-grant":{"type":"header","text":"资源所有者密码授权(Resource Owner Password Credentials Grant)","value":"资源所有者密码授权resource-owner-password-credentials-grant","line":169,"column":0,"depth":3},"参考文章":{"type":"header","text":"参考文章","value":"参考文章","line":175,"column":0,"depth":2}},"children":[],"parent":"aV4fmpfHFF0KTIisRBufV","data":{}},"body":"<h1 id=\"理解-oauth2\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#理解-oauth2\"></a>理解 OAuth2</h1>\n<h2 id=\"基本概念\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#基本概念\"></a>基本概念</h2>\n<p>OAuth2解决了使用通用的账户系统，授权并登陆第三方程序的问题。比如使用新浪微博账号登陆知乎，比如使用google账户登陆stackoverflow。</p>\n<h3 id=\"角色roles\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#角色roles\"></a>角色(Roles)</h3>\n<ul>\n<li>resource owner: 受保护信息资源的拥有者，比如新浪微博的用户，以下简称Owner</li>\n<li>resource server: 受保护资源的提供者，比如新浪微博，以下简称Server</li>\n<li>client: 第三方应用或者网站，比如知乎，以下简称Client</li>\n<li>authorization server: 授权服务器，可以是resource server本身或者单独出现，比如新浪微博登录API，以下简称Auth\n<ul>\n<li>authorize API (endpoint): 验证Owner，发放Auth Code，须支持GET请求</li>\n<li>token API (endpoint): 验证Client，发放Token</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"user-agent\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#user-agent\"></a>User Agent</h3>\n<p>授权流程中User Agent就是你使用的浏览器或者App。Client或者Auth通过重定向User Agent到不同的URL完成授权过程，所以它是整个授权过程中的交互核心，详见<a href=\"#%E6%8E%88%E6%9D%83%E7%B1%BB%E5%9E%8B\">授权类型</a>中的时序图描述部分。</p>\n<h3 id=\"token\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#token\"></a>Token</h3>\n<h4 id=\"acess-token\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#acess-token\"></a>Acess Token</h4>\n<p>Access Token是整个授权流程的最终目标。第三方Client从Auth成功获取后便可以使用它访问受保护Server资源。通常情况下Access Token是一个经过Hash或者加密的字符串(<a href=\"https://tools.ietf.org/html/rfc6750\">Bear Token - RFC6750</a>)，其内容对第三方Client不透明(opaque，即第三方Client无须关注其内容构成)。它本身可以包含经过签名（以便Resource Server验证）的完整的授权信息，也可以只是完整授权信息的id。</p>\n<p>Client取得Token后通常将其作为Header设给Authroziation:</p>\n<pre><code># bear类型\nAuthorization: Bearer mF_9.B5f-4.1JqM\n# mac类型\nAuthorization: MAC id=\"h480djs93hd8\",nonce=\"274312:dj83hs9s\",mac=\"kDZvddkndxvhGRXZhvuDjEWhGeE=\"\n</code></pre>\n<h4 id=\"refresh-token\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#refresh-token\"></a>Refresh Token</h4>\n<p>Auth可以在返回Access Token时附上Refresh Token，以便当Access Token过期或者失效后使用Refresh Token获取新的Access Token。Refresh Token的发放是<strong>可选的</strong>，且仅由Auth返回给Client，它不应该被发送给Server。</p>\n<h4 id=\"access-token-scope\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#access-token-scope\"></a>(Access Token) Scope</h4>\n<p>授权请求的可选参数，用于限定授权范围，通常为空格分隔的大小写敏感的列表字符串。具体的scope列表应该有Auth设计提供。Auth可以完全忽略请求中的scope，或者返回和请求不一致的scope。</p>\n<h3 id=\"https\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#https\"></a>HTTPS</h3>\n<p>OAuth2强调必须使用HTTPS，否则明文传输auth code，token或者Client密码存在极大安全隐患。</p>\n<h3 id=\"client注册\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#client注册\"></a>Client注册</h3>\n<p>第三方Client根据类型需要向Auth注册以通过[授权码方式中步骤D](#Authorization Code)的验证，进一步提升安全性，保护Refresh Token。</p>\n<p>注册内容通常有：</p>\n<ul>\n<li>client_id: Auth上唯一表示该Client的字符串</li>\n<li>client_secret: 密码或者秘钥对。</li>\n<li>client type: 两种客户端类型之一，如果构成复杂则需要分开注册\n<ul>\n<li>confidential: 可以安全保存秘钥凭据的实现，比如web后端</li>\n<li>public: 运行在Owner设备上的应用，比如单页应用，本地桌面程序</li>\n</ul>\n</li>\n<li>redirection URIs: 请求完成是浏览器跳转返回的链接，URI越完整越安全。如果Client没有注册，Auth请求中必须包含redirect_uri。</li>\n</ul>\n<p>其中必须注册的Client包括：</p>\n<ul>\n<li>使用<a href=\"#Implicit%E6%8E%88%E6%9D%83\">Implicit授权</a>的confidential类型</li>\n<li>public类型</li>\n</ul>\n<p>规范中Auth必须支持HTTP Basic Auth进行Client密码校验。</p>\n<h2 id=\"授权类型\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#授权类型\"></a>授权类型</h2>\n<h3 id=\"授权码授权-authorization-code-grant\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#授权码授权-authorization-code-grant\"></a>授权码授权 (Authorization Code Grant)</h3>\n<blockquote>\n<p>the transmission of the access token directly to the client without\npassing it through the resource owner's user-agent and potentially\nexposing it to others, including the resource owner.</p>\n</blockquote>\n<p>安全性最高的授权模式：最终的访问令牌直接发送给client程序，绕过了UserAgent(浏览器)，所以无论是你自己或者任何浏览器中运行的其它程序均无法获得。</p>\n<h4 id=\"流程\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#流程\"></a>流程</h4>\n<div class=\"mermaid\">\n  sequenceDiagram\n    participant O as Resource Owner\n    participant C as Client\n    participant UA as User Agent\n    participant AS as Auth Server\n\n    C->>+UA: A1. 使用新浪微博登陆知乎\n    \n    UA->>+AS: A2. 知乎重定向浏览器到新浪微博登录页并附加请求信息：\n    Note over UA, AS: response_type=code client_id [redirect_uri] [scope] [state]\n\n    O->>AS: B. 在浏览器中登录新浪微博，验证授权请求scope，比如获取你的邮箱\n\n    AS-->>-UA: C1. 浏览器重定向到步骤A中的redirect_uri\n    Note over UA, AS: 附加至查询参数:code=xx&#x26;state=xx 或失败:error=access_denied&#x26;state=xx\n\n    UA-->>-C: C2. 知乎JS应首先执行，从URI中获取并删除auth code\n\n    C->>+AS: D. POST请求：用code换access token\n    Note over UA: code grant_type client_id redirect_uri \n\n    AS->>AS: authenticate client, validate code/redirect-uri\n\n    AS-->>-C: E. access token, optional refresh token in body\n</div>\n<h4 id=\"http请求示例\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#http请求示例\"></a>HTTP请求示例</h4>\n<pre><code># Client授权请求，浏览器被重定向到登录页面\nhttps://authorization-server.com/auth?response_type=code&#x26;\n  client_id=CLIENT_ID&#x26;redirect_uri=REDIRECT_URI&#x26;scope=photos&#x26;state=1234zyx\n\n# 登录、授权成功，Auth使用以下链接将浏览器重定向回Client\nhttps://example-app.com/cb?code=AUTH_CODE_HERE&#x26;state=1234zyx\n\n# Client使用code换取Access Token\nPOST https://api.authorization-server.com/token\n  grant_type=authorization_code&#x26;\n  code=AUTH_CODE_HERE&#x26;\n  redirect_uri=REDIRECT_URI&#x26;\n  client_id=CLIENT_ID&#x26;\n  client_secret=CLIENT_SECRET\n</code></pre>\n<h3 id=\"隐式授权-implicit-grant\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#隐式授权-implicit-grant\"></a>隐式授权 (Implicit Grant)</h3>\n<blockquote>\n<p>simplified authorization code flow optimized for clients implemented in a browser using a\nscripting language such as JavaScript.</p>\n</blockquote>\n<p>一步完成Access Token获取，无须显式Client验证（仅通过redirection URI隐式验证）。Access Token会被加入redirection URI fragment(#哈希部分），并存留于User Agent，降低了安全性。</p>\n<p><strong>该授权方式最早为为单页应用设计，但目前在新版规范中已经废弃！请使用code授权方式，但是不使用client secrect。即在使用code换取token时，不使用client_secrect</strong></p>\n<h4 id=\"http请求示例-1\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#http请求示例-1\"></a>HTTP请求示例</h4>\n<pre><code># Client授权请求\nhttps://authorization-server.com/auth?response_type=code&#x26;client_id=CLIENT_ID&#x26;redirect_uri=REDIRECT_URI&#x26;scope=photos&#x26;state=1234zyx\n\n# Auth 端在Client成功授权后，对浏览器重定向\nhttps://example-app.com/cb?code=AUTH_CODE_HERE&#x26;state=1234zyx\n\n# Client使用code换取Access Token\nPOST https://api.authorization-server.com/token\n  grant_type=authorization_code&#x26;\n  code=AUTH_CODE_HERE&#x26;\n  redirect_uri=REDIRECT_URI&#x26;\n  client_id=CLIENT_ID\n</code></pre>\n<h3 id=\"客户程序凭证授权client-credentials-grant\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#客户程序凭证授权client-credentials-grant\"></a>客户程序凭证授权(Client Credentials Grant)</h3>\n<p>第三方程序(Client)通过已经注册的凭证直接向Auth申请Access Token以访问由自己控制的资源(比如API)。</p>\n<p>最常见的情况为<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-accesstoken\">微信小程序可以获取Access Token的过程</a>：</p>\n<pre><code>GET 'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&#x26;appId=xxxxxxxxx&#x26;secret=xxxxxxxxxxxxx'\n</code></pre>\n<h3 id=\"资源所有者密码授权resource-owner-password-credentials-grant\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#资源所有者密码授权resource-owner-password-credentials-grant\"></a>资源所有者密码授权(Resource Owner Password Credentials Grant)</h3>\n<p>当且仅当资源所有者与第三方程序有极强的信任关系，或者第三方为高优先级程序(比如操作系统)时才可以使用的授权方式。\n另外一种情况就是讲已有的凭证进行转换升级，比如将已经保存的老版本OAuth凭据转换为Access Token。</p>\n<h2 id=\"参考文章\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#参考文章\"></a>参考文章</h2>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc6749\">The OAuth 2.0 Authorization Framework - RFC6749</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html\">理解OAuth 2.0 - 阮一峰</a></li>\n<li><a href=\"http://www.bubblecode.net/en/2016/01/22/understanding-oauth2/\">Understanding OAuth2</a></li>\n<li><a href=\"https://aaronparecki.com/oauth-2-simplified/\">OAuth 2 Simplified</a></li>\n</ul>\n<hr>\n<h2 id=\"tags\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tags\"></a>Tags</h2>\n<ol>\n<li><a title=\"Private\" href=\"https://wiki.dendron.so/notes/hfyvYGJZQiUwQaaxQO27q.html\" target=\"_blank\" class=\"private\">oauth2 (Private)</a></li>\n</ol>","noteIndex":{"id":"vYtTF9oM10fyPqClpqacH","title":"Quotes","desc":"Words that inspire","updated":1662389818404,"created":1641209711079,"custom":{"nav_order":0,"permalink":"/"},"fname":"quotes","type":"note","vault":{"fsPath":"vault"},"contentHash":"52609b9ccab140b559e10e5b52ece29f","links":[],"anchors":{},"children":[],"parent":null,"data":{},"body":"\n$~$\n\nMay 10th, 2022\n> Promgramming language is just like human languange, one have to speak\nnatively to get evolved in the real business.\n-- Blogger\n\nDay 0\n\n> Simplicity is the ultimate sophistication.  \n-- Leonardo da Vinci\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"dendronVersion":"0.94.0","enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteIndex":"quotes","siteHierarchies":["quotes","network","shell","pki","cn"],"siteRootDir":"docs","siteUrl":"https://betterbe.fun/","enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Better Be Fun","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico"}}},"__N_SSG":true}